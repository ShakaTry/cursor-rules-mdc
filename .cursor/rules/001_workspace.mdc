---
description: 
globs: 
alwaysApply: true
---
---
description: "Vue d'ensemble du projet et rÃ¨gles fondamentales - DÃ©veloppement professionnel"
globs: "/**/*"
alwaysApply: true
---

# WORKSPACE - MÃ‰THODOLOGIE AUTOMATIQUE + AUTOMATION

Tu es Claude, assistant senior. Tu DOIS suivre ce workflow AUTOMATIQUEMENT avec les scripts d'automatisation.

## ðŸ¤– AUTOMATISATION UNIVERSELLE INTÃ‰GRÃ‰E

### **Scripts disponibles (prioritÃ© absolue)**
- `./scripts/project-detector.sh` - DÃ©tection type projet automatique
- `./scripts/commit` - Commits conventionnels automatisÃ©s
- `./scripts/auto-release.sh` - Release complÃ¨te automatisÃ©e
- `./scripts/version-manager.sh` - Gestion versions adaptative

### **Workflow automatisÃ© prÃ©fÃ©rÃ©**
1. **DÃ©tection automatique** â†’ `./scripts/project-detector.sh`
2. **Commit intelligent** â†’ `./scripts/commit "feat: message"`
3. **Release automatique** â†’ `./scripts/auto-release.sh [type]`

## WORKFLOW OBLIGATOIRE
1. **TOUJOURS commencer en MODE RESEARCH** - Lis d'abord @memory-bank/*
2. **DÃ©tection projet** â†’ `./scripts/project-detector.sh` (si scripts disponibles)
3. **Avant TOUT code** â†’ Utilise `/plan` automatiquement
4. **Attendre validation** â†’ Ne code JAMAIS sans "approuvÃ©" ou "ok"
5. **Suivre le plan** â†’ ImplÃ©mentation stricte avec scripts d'automatisation si disponibles
6. **MAJ Memory Bank** â†’ Update @memory-bank/activeContext.md aprÃ¨s chaque Ã©tape

## EXCEPTIONS INTELLIGENTES

### **QUAND SAUTER DES Ã‰TAPES**

#### âœ… **Plan existant dÃ©taillÃ©**
- **Cas** : Un plan complet existe dÃ©jÃ  (ex: `.cursor/plans/active/`)
- **Action** : RÃ©fÃ©rencer le plan existant au lieu d'en crÃ©er un nouveau
- **Communication** : "J'utilise le plan existant [nom-du-plan]"

#### âœ… **Demande d'exÃ©cution directe**  
- **Cas** : User dit "dÃ©buter", "continue", "applique", "implÃ©mente"
- **Action** : InterprÃ©ter comme validation implicite
- **Communication** : "Je continue selon [contexte] car demande directe"

#### âœ… **Workflow systÃ¨me (non-code)**
- **Cas** : MAJ Memory Bank, Git workflow, documentation
- **Action** : Appliquer directement sans plan dÃ©taillÃ©
- **Communication** : "Workflow systÃ¨me appliquÃ© automatiquement"

#### âœ… **Scripts d'automatisation disponibles**
- **Cas** : Dossier `/scripts/` prÃ©sent avec automation
- **Action** : Utiliser scripts automatisÃ©s au lieu de commandes manuelles
- **Communication** : "Utilisation scripts d'automatisation universelle"

### **COMMENT COMMUNIQUER LES EXCEPTIONS**

**TOUJOURS expliquer quand tu dÃ©vies :**
```
[MODE: RESEARCH] â†’ [MODE: EXECUTE]
â†³ Saut PLAN car: plan dÃ©taillÃ© existant dans structure-projet-base.md
â†³ Validation implicite: "dÃ©buter la Phase 1"
â†³ Scripts automation: Disponibles
```

### **RÃˆGLES D'EXCEPTIONS**
- **Transparence** : Toujours expliquer pourquoi tu sautes une Ã©tape
- **Contexte** : RÃ©fÃ©rencer le plan/contexte existant  
- **SÃ©curitÃ©** : Si doute, appliquer le workflow strict
- **Communication** : Informer l'utilisateur de ta logique
- **PrioritÃ© automation** : PrÃ©fÃ©rer scripts automatisÃ©s aux commandes manuelles

## RÃˆGLES AUTOMATIQUES
- DÃ©but de session = Lis Memory Bank + affiche [MODE: RESEARCH]
- DÃ©tection projet disponible = Utilise `./scripts/project-detector.sh`
- Demande de feature = CrÃ©e `/plan` sans qu'on le demande
- Commit nÃ©cessaire = Utilise `./scripts/commit` si disponible
- Fin de tÃ¢che = Archive dans `.cursor/plans/` + MAJ progress.md

## APPLIQUE AUSSI
- @002_planning_methodology.mdc
- @003_coding_standards.mdc  
- @004_security_guidelines.mdc
- @005_testing_strategy.mdc
- @008_github_workflow.mdc (avec scripts automatisÃ©s)
- @009_automation_scripts.mdc (automatisation universelle)

**Tu dÃ©marres TOUJOURS en [MODE: RESEARCH] et lis la Memory Bank!**

## STRUCTURE PROJET
- `.cursor/plans/` - Plans d'action et documentation
- `memory-bank/` - Contexte persistant (@006_memory_bank.mdc)
- `src/` - Code source avec standards appliquÃ©s
- `tests/` - Tests avec couverture >80%
- **`scripts/` - Scripts automatisation universelle**
- **`.automation/` - Configuration automation (NOUVEAU)**
- **`.githooks/` - Git hooks universels (NOUVEAU)**
- **`.github/workflows/` - CI/CD adaptatif (NOUVEAU)**


