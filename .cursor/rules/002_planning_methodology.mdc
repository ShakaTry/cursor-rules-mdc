---
description: 
globs: 
alwaysApply: false
---
---
description: "Méthodologie de planification avec template générique"
globs: ".cursor/plans/**/*,**/plan/**/*,**/planning/**/*"
alwaysApply: false
---

# PLANIFICATION OBLIGATOIRE - COPIE DU TEMPLATE

## 🚨 RÈGLE ABSOLUE
**TOUJOURS** copier le template générique avant de coder !

## 📋 PROCESSUS AUTOMATIQUE

### 1. **CRÉATION DU PLAN**
```bash
# Copier le template générique
.cursor/plans/templates/plan-template.md
→ .cursor/plans/active/YYYY-MM-DD-[feature].md
```

### 2. **DÉCOUPAGE PAR PHASES OBLIGATOIRE**
⚠️ **RÈGLE CRITIQUE** : Chaque plan DOIT être découpé en phases précises !

**Structure obligatoire :**
```markdown
### **Phase 1: [Titre Phase] (~[temps]min)**
- 📋 **Objectif** : Description claire
- 🎯 **Livrable** : Résultat attendu
- ⚡ **Actions** :
  1. Action spécifique 1
  2. Action spécifique 2
  3. Action spécifique 3

### **Phase 2: [Titre Phase] (~[temps]min)**
- 📋 **Objectif** : Description claire
- 🎯 **Livrable** : Résultat attendu
- ⚡ **Actions** :
  1. Action spécifique 1
  2. Action spécifique 2
```

**Exemple type de phases :**
- **Phase 1** : Analyse et architecture (~15min)
- **Phase 2** : Implémentation core (~30min)
- **Phase 3** : Tests et validation (~15min)
- **Phase 4** : Documentation et finalisation (~10min)

### 3. **WORKFLOW OBLIGATOIRE**
1. **COPIE** le template générique
2. **REMPLIT** toutes les sections `[PLACEHOLDER]`
3. **DÉCOUPE** en phases précises avec objectifs clairs
4. **AFFICHE** le plan complété avec phases
5. **ATTEND** validation : "ok", "approuvé", "validé"
6. **IMPLÉMENTE** phase par phase selon le plan
7. **🚀 EXECUTE LA PHASE** automatiquement puis **CONTINUE** vers suivante
8. **💾 COMMIT AUTOMATIQUE** après chaque phase (sauvegarde progression)
9. **🧠 MAJ MEMORY BANK** après chaque phase (contextualisation)
10. **ARCHIVE** dans `completed/` après finalisation

### 4. **STRUCTURE DES DOSSIERS**

.cursor/plans/
├── templates/
│ └── plan-template.md # Template générique (NE PAS MODIFIER)
├── active/ # Plans en cours
│ └── YYYY-MM-DD-.md
└── completed/ # Plans terminés
└── YYYY-MM-DD-.md


## ⚡ COMMANDES MENTALES

```bash
# Nouveau plan
cp templates/plan-template.md active/$(date +%Y-%m-%d)-feature.md

# Plan terminé
mv active/plan.md completed/

# MAJ Memory Bank
echo "Plan complété" >> memory-bank/activeContext.md
```

## 🔴 RAPPELS CRITIQUES

- **NE JAMAIS** coder sans plan validé
- **NE JAMAIS** modifier le template générique
- **TOUJOURS** faire une copie du template
- **TOUJOURS** remplir TOUTES les sections
- **🚨 OBLIGATOIRE** : Découper en phases précises avec temps estimé
- **TOUJOURS** suivre les phases dans l'ordre
- **TOUJOURS** valider chaque phase avant la suivante
- **🚀 TOUJOURS** continuer automatiquement avec **💾 COMMIT** + **🧠 MAJ MEMORY BANK** après chaque phase
- **💾 OBLIGATOIRE** : Commit automatique + MAJ Memory Bank après chaque phase
- **TOUJOURS** archiver après implémentation

## 🧠 GESTION DU CONTEXTE

### **Problème critique identifié**
- **Perte de contexte** lors de l'exécution sans sauvegarde intermédiaire
- **Absence de traçabilité** entre les phases
- **Impossibilité de reprendre** en cas d'interruption

### **Solution appliquée**
- **Exécution automatique continue** : Toutes les phases enchaînées
- **Checkpoints automatiques** : Commit + Memory Bank après chaque phase
- **Contexte préservé** : Sauvegarde progressive de l'état
- **Traçabilité complète** : Historique Git + contexte persistant

## 📐 **BONNES PRATIQUES PHASES**

### **Estimation temps réaliste**
- **Simple** : 2-3 phases, 30-60 min total
- **Moyen** : 3-4 phases, 1-2h total  
- **Complexe** : 4-6 phases, 2-4h total

### **Objectifs phases clairs**
- Chaque phase doit avoir un **livrable concret**
- Objectifs **mesurables** et **vérifiables**
- Actions **spécifiques** et **réalisables**

### **Validation progressive & Continuité avec checkpoints**
- Valider chaque phase avant la suivante
- **🚀 CONTINUER AUTOMATIQUEMENT** vers la phase suivante
- **💾 COMMIT AUTOMATIQUE** après chaque phase complétée
- **🧠 MAJ MEMORY BANK** après chaque phase complétée
- **Checkpoints automatiques** pour sauvegarder progression
- Enchaîner les phases de manière fluide avec sauvegarde
- Ajuster les phases suivantes si nécessaire
- Documenter les déviations du plan


**Template générique : `.cursor/plans/templates/plan-template.md`**