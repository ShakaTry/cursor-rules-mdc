---
description: 
globs: 
alwaysApply: false
---
# STANDARDS DE D√âVELOPPEMENT UNIFI√âS

## üèóÔ∏è PRINCIPES FONDAMENTAUX
- **SOLID** - Single Responsibility, Open/Closed, Liskov, Interface, Dependency
- **DRY** - Don't Repeat Yourself + **S√©curit√© by Design** + **Test First**
- **KISS** - Keep It Simple, Stupid
- **YAGNI** - You Aren't Gonna Need It

---

## üíª STANDARDS DE CODE

### **Conventions**
```javascript
// ‚úÖ Bon: Noms explicites, validation int√©gr√©e, testable
const getUserById = async (userId) => {
  validateId(userId); // S√©curit√© int√©gr√©e
  return await userRepository.findById(userId);
}

// ‚ùå √âvite: Noms vagues, logique complexe, non s√©curis√©
const get = (id) => { /* 50 lignes non testables */ }
```

### **Structure & Qualit√©**
- **Fonctions** < 20 lignes (facilite tests unitaires)
- **Classes** < 200 lignes  
- **Imports** organis√©s (libs ‚Üí projet ‚Üí locaux)
- **Responsabilit√© unique** par module
- **Gestion d'erreurs** explicite et s√©curis√©e

---

## üîí S√âCURIT√â INT√âGR√âE

### **Validation Obligatoire**
```javascript
// ‚úÖ TOUJOURS valider (s√©curit√© + tests)
const schema = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().min(8).required()
});
const validated = schema.validate(input);
```

### **Authentification Standard**
- **Bcrypt** (saltRounds=12) pour passwords
- **JWT** avec expiration courte (1h max)
- **Refresh tokens** en HttpOnly cookies
- **Rate limiting** sur endpoints sensibles

### **Protection Essentielle**
- **XSS**: √âchapper TOUT contenu utilisateur
- **SQL**: Requ√™tes pr√©par√©es UNIQUEMENT
- **CSRF**: Tokens sur toutes mutations
- **Secrets**: Variables env, JAMAIS hardcod√©s

---

## üß™ STRAT√âGIE DE TESTS

### **Pyramide de Tests**
```
   /\    E2E (5%) - Parcours critiques
  /--\   Integration (15%) - APIs, DB  
 /----\  Unit (80%) - Logique m√©tier
```

### **Structure AAA + S√©curit√©**
```javascript
test('should validate user input securely', () => {
  // Arrange - Donn√©es s√©curis√©es
  const maliciousInput = "<script>alert('xss')</script>";
  
  // Act - Validation + sanitization
  const result = sanitizeInput(maliciousInput);
  
  // Assert - S√©curit√© v√©rifi√©e
  expect(result).not.toContain('<script>');
  expect(result).toBe('&lt;script&gt;alert(\'xss\')&lt;/script&gt;');
});
```

### **R√®gles TDD + S√©curit√©**
- **Test d'abord** pour nouvelles features
- **Tests s√©curit√©** syst√©matiques (XSS, injection, auth)
- **Un test** = un seul comportement
- **Mocks** pour d√©pendances externes
- **Tests isol√©s** et rapides (<100ms)

---

## ‚úÖ CHECKLISTS INT√âGR√âES

### **Checklist D√©veloppement**
- [ ] **Code** : Fonctions < 20 lignes, noms explicites
- [ ] **S√©curit√©** : Validation entr√©es, √©chappement sorties
- [ ] **Tests** : Unitaires + couverture >80%
- [ ] **Structure** : Imports organis√©s, responsabilit√© unique

### **Checklist PR/D√©ploiement**
- [ ] **Tests** : Unitaires ajout√©s, coverage >80%, pas de `.only`/.skip`
- [ ] **S√©curit√©** : Scan d√©pendances (`npm audit`), headers s√©curit√©
- [ ] **Qualit√©** : Linting pass√©, documentation √† jour
- [ ] **D√©ploiement** : HTTPS forc√©, logs sans donn√©es sensibles

### **Checklist S√©curit√© Critique**
- [ ] Variables environnement pour secrets
- [ ] Rate limiting configur√©
- [ ] Tests d'intrusion basiques pass√©s
- [ ] Audit d√©pendances clean

---

## üìö DOCUMENTATION INTELLIGENTE
- **JSDoc** pour APIs publiques uniquement
- **Commentaires** sur le POURQUOI, pas le QUOI
- **README.md** par module si logique complexe
- **Tests** comme documentation vivante du comportement


