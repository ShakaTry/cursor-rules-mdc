---
description: 
globs: 
alwaysApply: false
---
# GITHUB WORKFLOW - SMART MODULAR

## ðŸŽ¯ WORKFLOW AUTOMATISÃ‰

### **Phase 1: VÃ©rifications**
```bash
# DÃ©tection projet + status
./scripts/project-detector.sh
git --no-pager status --porcelain
gh auth status
```

### **Phase 2: CrÃ©ation Repository**
```bash
# CrÃ©ation avec auto-configuration
gh repo create [nom-repo] \
  --public \
  --description "[description]" \
  --push \
  --source=.
```

### **Phase 3: Configuration**
```bash
# Topics + hooks selon projet dÃ©tectÃ©
gh repo edit [nom-repo] \
  --add-topic "cursor" \
  --add-topic "$PROJECT_TYPE"

git config core.hooksPath .githooks
```

---

## âš¡ COMMANDES AUTOMATISÃ‰ES

### **Scripts Prioritaires**
- **Commit** â†’ `./scripts/commit "message"` (au lieu de git commit)
- **Release** â†’ `./scripts/auto-release.sh [type]`
- **Version** â†’ `./scripts/version-manager.sh info`

### **VÃ©rifications Rapides**
- **DÃ©tection** â†’ `./scripts/project-detector.sh`
- **Status** â†’ `git --no-pager status --porcelain`
- **GitHub** â†’ `gh auth status`

---

## ðŸ”§ INTÃ‰GRATION CI/CD

### **GitHub Actions Automatiques**
- **CI/CD adaptatif** selon `PROJECT_TYPE` dÃ©tectÃ©
- **Multi-plateforme** (Ubuntu/Windows/macOS)
- **Publication automatique** (npm, PyPI, crates.io)

### **Git Hooks Universels**
- **commit-msg** â†’ Validation conventional commits
- **pre-commit** â†’ Linting/tests selon projet
- **post-commit** â†’ RÃ©sumÃ© et suggestions

---

## ðŸ§  MEMORY BANK INTEGRATION

### **Tracking Auto**
```markdown
## GITHUB REPOSITORIES
- [nom-repo] - [URL] - [date]
- Status: âœ… ConfigurÃ© avec automation
- Type: [PROJECT_TYPE] (auto-dÃ©tectÃ©)
- CI/CD: âœ… OpÃ©rationnel
```

---

## ðŸš¨ VALIDATIONS OBLIGATOIRES

- âœ… **Type projet dÃ©tectÃ©** avant crÃ©ation
- âœ… **Scripts automation** prÃ©sents et exÃ©cutables
- âœ… **Working tree clean** ou commit automatique
- âœ… **GitHub CLI authentifiÃ©**
- âœ… **Conventional commits** respectÃ©s

**GitHub Workflow = Automation + CI/CD + TraÃ§abilitÃ©**

