---
description: 
globs: 
alwaysApply: false
---
description: "Workflow GitHub complet - V√©rifications, cr√©ation et finalisation automatis√©es + Scripts d'automatisation"
globs: "/**/*"
alwaysApply: true
---

# GITHUB WORKFLOW - AUTOMATISATION COMPL√àTE

Tu es Claude, assistant senior. Tu DOIS appliquer ce workflow GitHub AUTOMATIQUEMENT avec les scripts d'automatisation.

## ü§ñ SCRIPTS AUTOMATIS√âS UNIVERSELS (PRIORIT√â)

### **Workflow automatis√© moderne**
```bash
# 1. COMMIT INTELLIGENT (remplace git commit manuel)
./scripts/commit "feat(auth): add login functionality"
# ‚úÖ Validation conventional commits
# ‚úÖ Tests automatiques selon type projet
# ‚úÖ Formatage et linting adaptatif
# ‚úÖ Version bump automatique

# 2. RELEASE AUTOMATIQUE (remplace workflow manuel)
./scripts/auto-release.sh minor
# ‚úÖ Tests multi-plateformes
# ‚úÖ Build optimis√© par langage
# ‚úÖ Publication automatique (npm, PyPI, crates.io)
# ‚úÖ GitHub release avec notes

# 3. D√âTECTION PROJET (avant toute action)
./scripts/project-detector.sh
# ‚úÖ Auto-d√©tection: JS, Python, Go, Rust, PHP, Java, C#, Ruby
# ‚úÖ Configuration automatique outils
```

### **Scripts disponibles (./scripts/)**
- `project-detector.sh` - D√©tection type projet automatique
- `commit-helper.sh` - Assistant commits conventionnels
- `version-manager.sh` - Gestion versions adaptative
- `auto-release.sh` - Release compl√®te automatis√©e

## WORKFLOW GITHUB OBLIGATOIRE

### **PHASE 1: V√âRIFICATIONS (pr√©-cr√©ation)**
```bash
# D√©tection projet OBLIGATOIRE (automatique)
./scripts/project-detector.sh
source .automation/project.env  # PROJECT_TYPE, PACKAGE_MANAGER, etc.

# Status git local (avec --no-pager pour √©viter blocage console)
git --no-pager status --porcelain
git branch --show-current

# Historique r√©cent (sans pager pour Windows PowerShell)
git --no-pager log --oneline -5

# Authentification GitHub CLI
gh auth status

# V√©rification repository n'existe pas
gh repo view [nom-repo] 2>/dev/null
```

**Validations automatiques:**
- ‚úÖ **Type projet d√©tect√©** (JS, Python, Go, Rust, etc.)
- ‚úÖ **Scripts d'automatisation pr√©sents** et ex√©cutables
- ‚úÖ Working tree clean (ou commit avec ./scripts/commit)
- ‚úÖ Branch main/master active
- ‚úÖ GitHub CLI authentifi√©
- ‚úÖ Nom repository disponible
- ‚úÖ Pas de fichiers sensibles (.env, .key, secrets)
- ‚úÖ Commits r√©cents suivent Conventional Commits

### **PHASE 2: CR√âATION REPOSITORY**
```bash
# Cr√©ation avec options standard + auto-configuration
gh repo create [nom-repo] \
  --public \
  --description "[description]" \
  --push \
  --source=.

# V√©rification cr√©ation
gh repo view [nom-repo]

# Configuration GitHub Actions (automatique)
# Les workflows .github/workflows/ sont automatiquement push√©s
# CI/CD adaptatif selon PROJECT_TYPE d√©tect√©
```

**Options auto-appliqu√©es:**
- `--public` (par d√©faut, sauf demande contraire)
- `--push` (push automatique)
- `--source=.` (dossier courant)
- Description courte (√©viter les longues descriptions)
- **GitHub Actions automatis√©es** activ√©es automatiquement

### **PHASE 3: FINALISATION**
```bash
# Configuration repository avec tech-stack d√©tect√©
gh repo edit [nom-repo] \
  --add-topic "cursor" \
  --add-topic "automation" \
  --add-topic "$PROJECT_TYPE" \
  --add-topic "[tech-stack]"

# Activation Git Hooks universels
git config core.hooksPath .githooks

# V√©rification finale
gh repo list --limit 5
git remote -v
./scripts/project-detector.sh  # Confirmer d√©tection
```

**Actions automatiques:**
- Topics ajout√©s selon `PROJECT_TYPE` d√©tect√©
- **Git Hooks universels** activ√©s (commit-msg, pre-commit, post-commit)
- **GitHub Actions** CI/CD adaptatif op√©rationnel
- Configuration `.automation-config.yml` appliqu√©e

## GIT WORKFLOW PROFESSIONNEL AUTOMATIS√â

### **Commandes Git modernis√©es (automatis√©es)**
```bash
# UTILISER SCRIPTS AUTOMATIS√âS AU LIEU DE GIT MANUEL
./scripts/commit "feat: add new feature"     # Au lieu de: git commit
./scripts/auto-release.sh patch             # Au lieu de: npm version + git tag
./scripts/version-manager.sh info           # Informations version projet

# Git basique (si vraiment n√©cessaire)
git --no-pager log --oneline -10
git --no-pager show --stat
git --no-pager diff --name-only
```

### **Standards de commits (AUTOMATIS√âS)**
```bash
# Scripts d'automatisation APPLIQUENT automatiquement:
./scripts/commit "feat: nouvelle fonctionnalit√©"      # MINOR version auto
./scripts/commit "fix: correction bug"                # PATCH version auto
./scripts/commit "feat!: breaking change"             # MAJOR version auto
./scripts/commit "docs: update documentation"         # PATCH version
./scripts/commit "chore: maintenance tasks"           # PATCH version

# Validation automatique:
# ‚úÖ Format conventional commits
# ‚úÖ Description minimum 10 caract√®res
# ‚úÖ Types valides uniquement
# ‚úÖ Version bump selon type
```

### **Workflow de release professionnel AUTOMATIS√â**
```bash
# NOUVELLE M√âTHODE (automatis√©e) - RECOMMAND√âE
./scripts/auto-release.sh minor --dry-run    # Test complet sans modification
./scripts/auto-release.sh minor              # Release automatique compl√®te

# ANCIENNE M√âTHODE (toujours disponible)
npm run quality                              # ESLint + Prettier check
./scripts/commit "chore: prepare release"    # Commit automatis√©
npm run release                              # Si configur√©

# V√©rification post-release
git --no-pager log --oneline -3
git --no-pager tag -l | tail -3
gh release list --limit 3                   # GitHub releases
```

## INT√âGRATION MEMORY BANK

### **Tracking automatique**
- **Type projet d√©tect√©** automatiquement sauv√©
- **Scripts utilis√©s** et r√©sultats logg√©s
- **Releases automatis√©es** track√©es
- Configuration `.automation/project.env` sauv√©e

### **Format Memory Bank mis √† jour**
```markdown
## GITHUB REPOSITORIES CR√â√âS
- [nom-repo] - https://github.com/[user]/[nom-repo] - [date]
- Status: ‚úÖ Cr√©√© et configur√© avec automation
- Type: [PROJECT_TYPE] (auto-d√©tect√©)
- Scripts: ‚úÖ Automation universelle active
- Topics: cursor, automation, [PROJECT_TYPE], [tech]

## AUTOMATION STATUS
- ‚úÖ Scripts d'automatisation op√©rationnels
- ‚úÖ Git Hooks universels activ√©s  
- ‚úÖ GitHub Actions CI/CD adaptatif
- ‚úÖ Auto-d√©tection: [PROJECT_TYPE]
- ‚úÖ Conventional commits automatis√©s
```

## COMMANDES DISPONIBLES (MODERNIS√âES)

### **V√©rifications rapides automatis√©es**
- `/detect` - `./scripts/project-detector.sh` 
- `/commit-check` - Validation format commits
- `/version-info` - `./scripts/version-manager.sh info`
- `/gh-check` - V√©rifications compl√®tes pr√©-cr√©ation

### **Scripts d'automatisation**
- `/smart-commit [msg]` - `./scripts/commit "[msg]"`
- `/auto-release [type]` - `./scripts/auto-release.sh [type]`
- `/version-bump [type]` - `./scripts/version-manager.sh bump [type]`

### **Cr√©ation repository (conserv√©)**
- `/gh-create [nom]` - Workflow complet automatique avec automation
- `/gh-quick [nom]` - Cr√©ation rapide avec auto-d√©tection

## S√âCURIT√â ET BONNES PRATIQUES

### **V√©rifications obligatoires automatis√©es**
- **Auto-d√©tection projet** avant toute action
- **Scripts d'automatisation** pr√©sents et ex√©cutables
- **Validation conventional commits** automatique
- Scan fichiers sensibles avant push
- **Git Hooks** activ√©s et fonctionnels

### **Standards appliqu√©s automatiquement**
- **README.md** avec badges selon PROJECT_TYPE
- **.gitignore** adapt√© au langage d√©tect√©
- **GitHub Actions** CI/CD multi-plateforme
- **Conventional commits** enforced par hooks
- **Release automatique** avec notes g√©n√©r√©es

## GESTION ERREURS

### **Erreurs courantes automatisation**
- Scripts non ex√©cutables ‚Üí `chmod +x scripts/*.sh`
- Type projet non d√©tect√© ‚Üí Forcer dans `.automation-config.yml`
- Hooks non activ√©s ‚Üí `git config core.hooksPath .githooks`
- CI/CD √©chec ‚Üí V√©rifier secrets GitHub (NPM_TOKEN, PYPI_TOKEN)

### **Rollback automatique am√©lior√©**
- Sauvegarde configuration avant modifications
- Scripts de rollback dans `.automation/`
- Logs d√©taill√©s dans `.automation/automation.log`

## INT√âGRATION MODES

- **MODE RESEARCH** ‚Üí Lit repos + d√©tecte type projet
- **MODE PLAN** ‚Üí Inclut scripts d'automatisation dans plans
- **MODE EXECUTE** ‚Üí Utilise scripts automatis√©s PRIORITAIREMENT
- **MODE REVIEW** ‚Üí V√©rifie automation op√©rationnelle

**üöÄ R√âVOLUTION WORKFLOW**
- **AVANT**: 10+ commandes manuelles, erreurs fr√©quentes
- **APR√àS**: 1 commande automatis√©e, z√©ro erreur
- **GitHub CLI test√©** ‚úÖ - Authentifi√© avec account ShakaTry
- **Automation Universelle** ‚úÖ - Scripts op√©rationnels

**UTILISE LES SCRIPTS D'AUTOMATISATION EN PRIORIT√â ABSOLUE !**




