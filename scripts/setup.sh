#!/bin/bash
# 🚀 Setup Script - Complete Automatic Installation

echo "🔧 Starting cursor-rules setup..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 1. Check prerequisites
print_status "Checking prerequisites..."

if ! command_exists git; then
    print_error "Git is not installed. Please install Git first."
    exit 1
fi
print_success "Git found: $(git --version)"

if ! command_exists node; then
    print_warning "Node.js not found. Installing via package manager..."
    # Try to install Node.js (platform specific)
    if command_exists apt-get; then
        sudo apt-get update && sudo apt-get install -y nodejs npm
    elif command_exists brew; then
        brew install node
    elif command_exists choco; then
        choco install nodejs
    else
        print_error "Please install Node.js manually from https://nodejs.org/"
        exit 1
    fi
fi
print_success "Node.js found: $(node --version)"

if ! command_exists npm; then
    print_error "npm is not installed. Please install npm first."
    exit 1
fi
print_success "npm found: $(npm --version)"

# 2. Install dependencies
print_status "Installing dependencies..."
if [ -f "package.json" ]; then
    npm install
    if [ $? -eq 0 ]; then
        print_success "Dependencies installed successfully"
    else
        print_error "Failed to install dependencies"
        exit 1
    fi
else
    print_warning "No package.json found, skipping npm install"
fi

# 3. Create necessary directories
print_status "Creating project structure..."
mkdir -p src/{components,utils,config}
mkdir -p docs
mkdir -p scripts
mkdir -p examples/{basic-usage,advanced-usage,integrations}
mkdir -p templates/{project-base,component,config}
mkdir -p .cursor/{plans,rules}
print_success "Project structure created"

# 4. Set up Git configuration
print_status "Configuring Git..."

# Set commit message template if exists
if [ -f ".gitmessage" ]; then
    git config commit.template .gitmessage
    print_success "Git commit template configured"
fi

# Set up Git hooks for quality checks
if [ -d ".git" ]; then
    # Create pre-commit hook
    cat > .git/hooks/pre-commit << 'EOF'
#!/bin/bash
# Pre-commit hook for quality checks

echo "🔍 Running pre-commit quality checks..."

# Run quality checks
npm run quality
if [ $? -ne 0 ]; then
    echo "❌ Quality checks failed. Commit aborted."
    echo "💡 Run 'npm run quality:fix' to auto-fix issues"
    exit 1
fi

echo "✅ Quality checks passed"
EOF
    
    chmod +x .git/hooks/pre-commit
    print_success "Git pre-commit hook installed"
fi

# 5. Verify installation
print_status "Verifying installation..."

# Check if quality scripts work
if command_exists npm && [ -f "package.json" ]; then
    if npm run quality >/dev/null 2>&1; then
        print_success "Quality checks working"
    else
        print_warning "Quality checks not configured or failing"
    fi
fi

# 6. Create initial content if needed
print_status "Setting up initial content..."

# Create basic src/index.js if not exists
if [ ! -f "src/index.js" ] && [ ! -f "src/index.ts" ]; then
    cat > src/index.js << 'EOF'
/**
 * Main entry point
 * This file was generated by cursor-rules setup
 */

console.log('🚀 Welcome to your new project!');
console.log('📖 Check docs/ for documentation');
console.log('💡 Run npm run quality to check code quality');

// Export main functionality
module.exports = {
  version: require('../package.json').version,
  name: require('../package.json').name
};
EOF
    print_success "Created basic src/index.js"
fi

# Create .env.example if not exists
if [ ! -f ".env.example" ]; then
    cat > .env.example << 'EOF'
# Environment Variables Example
# Copy this file to .env and fill in your values

# Application
NODE_ENV=development
PORT=3000

# Database (if applicable)
# DATABASE_URL=mongodb://localhost:27017/myapp

# API Keys (if applicable) 
# API_KEY=your_api_key_here

# Debug
DEBUG=app:*
EOF
    print_success "Created .env.example"
fi

# 7. Make scripts executable
print_status "Making scripts executable..."
find scripts -name "*.sh" -exec chmod +x {} \;
print_success "Scripts made executable"

# 8. Final summary
echo ""
echo "🎉 Setup completed successfully!"
echo ""
echo "📋 What was configured:"
echo "  ✅ Dependencies installed"
echo "  ✅ Project structure created"
echo "  ✅ Git hooks configured"
echo "  ✅ Quality checks ready"
echo "  ✅ Initial files created"
echo ""
echo "🚀 Next steps:"
echo "  1. Run 'npm run quality' to check everything works"
echo "  2. Start coding in the src/ directory"
echo "  3. Read docs/usage.md for detailed usage"
echo "  4. Make your first commit: git commit -m 'feat: initial setup'"
echo ""
echo "💡 Available commands:"
echo "  npm run quality      # Check code quality"
echo "  npm run quality:fix  # Auto-fix quality issues"
echo "  npm run release      # Create new release"
echo "  ./scripts/build.sh   # Build project"
echo "  ./scripts/deploy.sh  # Deploy project"
echo ""
print_success "Happy coding! 🎉"

echo "🔧 Setting up development environment..."

# Install dependencies
echo "📦 Installing dependencies..."
npm install

# Configure Git hooks
echo "🪝 Configuring Git hooks..."
git config core.hooksPath .githooks 2>/dev/null || true

# Configure Git for better workflow (Windows PowerShell compatibility)
echo "⚙️ Configuring Git workflow..."
git config --global alias.lg "log --oneline --graph --decorate --all"
git config --global alias.st "status --porcelain"
git config --global alias.co "checkout"
git config --global alias.br "branch"

# Set up commit message template
echo "📝 Setting up commit message template..."
git config commit.template .gitmessage 2>/dev/null || true 