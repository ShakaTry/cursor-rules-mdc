#!/bin/bash
# 🤖 COMMIT-MSG HOOK - Universal Conventional Commit Validation
# Validates commit messages according to conventional commits standard
# Part of Phase 4 - Universal Automation

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the commit message from the file
commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Valid commit types
valid_types=("feat" "fix" "docs" "style" "refactor" "perf" "test" "build" "ci" "chore" "revert")

# Function to validate commit message format
validate_commit_message() {
    local msg="$1"
    
    # Skip merge commits
    if [[ "$msg" =~ ^Merge ]]; then
        return 0
    fi
    
    # Skip revert commits (they have their own format)
    if [[ "$msg" =~ ^Revert ]]; then
        return 0
    fi
    
    # Check basic format: type(scope): description
    if [[ ! "$msg" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([^)]+\))?!?:[[:space:]].+ ]]; then
        echo -e "${RED}❌ Invalid commit message format!${NC}" >&2
        echo -e "${YELLOW}Expected format: type(scope): description${NC}" >&2
        echo -e "${YELLOW}Example: feat(auth): add login functionality${NC}" >&2
        echo -e "${YELLOW}Valid types: ${valid_types[*]}${NC}" >&2
        echo "" >&2
        echo -e "${BLUE}Your commit message:${NC}" >&2
        echo -e "${RED}$msg${NC}" >&2
        return 1
    fi
    
    # Extract parts
    local type_scope=$(echo "$msg" | sed 's/:.*$//')
    local description=$(echo "$msg" | sed 's/^[^:]*: //')
    
    # Check description length (minimum 10 characters)
    if [[ ${#description} -lt 10 ]]; then
        echo -e "${RED}❌ Description too short!${NC}" >&2
        echo -e "${YELLOW}Minimum 10 characters required. Current: ${#description}${NC}" >&2
        echo -e "${BLUE}Description: ${RED}$description${NC}" >&2
        return 1
    fi
    
    # Check first line length (maximum 72 characters)
    local first_line=$(echo "$msg" | head -n1)
    if [[ ${#first_line} -gt 72 ]]; then
        echo -e "${YELLOW}⚠️  First line is long (${#first_line} chars). Consider shortening.${NC}" >&2
        echo -e "${YELLOW}Recommended maximum: 72 characters${NC}" >&2
    fi
    
    # Check for imperative mood (basic check)
    if [[ "$description" =~ ^(added|fixed|updated|removed|changed) ]]; then
        echo -e "${YELLOW}⚠️  Consider using imperative mood: 'add' instead of 'added', 'fix' instead of 'fixed'${NC}" >&2
    fi
    
    return 0
}

# Function to show commit message guidelines
show_guidelines() {
    echo -e "${BLUE}📋 Conventional Commit Guidelines:${NC}" >&2
    echo "" >&2
    echo -e "${GREEN}Format:${NC} type(scope): description" >&2
    echo "" >&2
    echo -e "${GREEN}Types:${NC}" >&2
    echo -e "  ${YELLOW}feat${NC}     - New feature" >&2
    echo -e "  ${YELLOW}fix${NC}      - Bug fix" >&2
    echo -e "  ${YELLOW}docs${NC}     - Documentation changes" >&2
    echo -e "  ${YELLOW}style${NC}    - Code style changes (formatting, etc.)" >&2
    echo -e "  ${YELLOW}refactor${NC} - Code refactoring" >&2
    echo -e "  ${YELLOW}perf${NC}     - Performance improvements" >&2
    echo -e "  ${YELLOW}test${NC}     - Adding or updating tests" >&2
    echo -e "  ${YELLOW}build${NC}    - Build system changes" >&2
    echo -e "  ${YELLOW}ci${NC}       - CI/CD changes" >&2
    echo -e "  ${YELLOW}chore${NC}    - Maintenance tasks" >&2
    echo -e "  ${YELLOW}revert${NC}   - Revert previous commit" >&2
    echo "" >&2
    echo -e "${GREEN}Examples:${NC}" >&2
    echo -e "  ${BLUE}feat(auth): add login functionality${NC}" >&2
    echo -e "  ${BLUE}fix: resolve memory leak in parser${NC}" >&2
    echo -e "  ${BLUE}docs: update installation guide${NC}" >&2
    echo -e "  ${BLUE}feat!: breaking change in API${NC}" >&2
    echo "" >&2
    echo -e "${GREEN}Breaking Changes:${NC}" >&2
    echo -e "  Add ${YELLOW}!${NC} after type/scope for breaking changes" >&2
    echo -e "  Example: ${BLUE}feat!: remove deprecated API${NC}" >&2
}

# Main validation
echo -e "${BLUE}🔍 Validating commit message...${NC}" >&2

if validate_commit_message "$commit_msg"; then
    echo -e "${GREEN}✅ Commit message is valid${NC}" >&2
    exit 0
else
    echo "" >&2
    show_guidelines
    echo "" >&2
    echo -e "${RED}❌ Commit rejected. Please fix the commit message and try again.${NC}" >&2
    echo -e "${YELLOW}💡 Tip: Use 'git commit --amend' to edit your commit message${NC}" >&2
    exit 1
fi 