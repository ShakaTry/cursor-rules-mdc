#!/bin/bash
# 🤖 POST-COMMIT HOOK - Universal Post-commit Actions
# Runs intelligent actions after successful commit
# Part of Phase 4 - Universal Automation

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Load project configuration
load_project_config() {
    if [[ -f ".automation/project.env" ]]; then
        source .automation/project.env
    else
        PROJECT_TYPE="generic"
    fi
}

# Get commit information
get_commit_info() {
    COMMIT_HASH=$(git rev-parse HEAD)
    COMMIT_MESSAGE=$(git log -1 --pretty=%B)
    COMMIT_AUTHOR=$(git log -1 --pretty=%an)
    COMMIT_DATE=$(git log -1 --pretty=%ad --date=short)
    FILES_CHANGED=$(git diff-tree --no-commit-id --name-only -r HEAD | wc -l)
    INSERTIONS=$(git show --stat | tail -1 | grep -o '[0-9]\+ insertion' | grep -o '[0-9]\+' || echo "0")
    DELETIONS=$(git show --stat | tail -1 | grep -o '[0-9]\+ deletion' | grep -o '[0-9]\+' || echo "0")
}

# Determine commit type and impact
analyze_commit() {
    local msg="$1"
    
    # Extract commit type
    if [[ "$msg" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert) ]]; then
        COMMIT_TYPE=$(echo "$msg" | sed 's/\([^(]*\).*/\1/')
    else
        COMMIT_TYPE="other"
    fi
    
    # Check for breaking changes
    if [[ "$msg" =~ ! ]]; then
        IS_BREAKING=true
    else
        IS_BREAKING=false
    fi
    
    # Determine impact level
    if [[ "$IS_BREAKING" == "true" ]]; then
        IMPACT_LEVEL="major"
    elif [[ "$COMMIT_TYPE" == "feat" ]]; then
        IMPACT_LEVEL="minor"
    else
        IMPACT_LEVEL="patch"
    fi
}

# Log commit to automation log
log_commit() {
    local log_file=".automation/commit.log"
    
    # Create log directory if it doesn't exist
    mkdir -p .automation
    
    # Log entry
    echo "$(date '+%Y-%m-%d %H:%M:%S') | $COMMIT_HASH | $COMMIT_TYPE | $IMPACT_LEVEL | $FILES_CHANGED files | +$INSERTIONS -$DELETIONS | $COMMIT_MESSAGE" >> "$log_file"
    
    # Keep only last 100 entries
    if [[ -f "$log_file" ]]; then
        tail -100 "$log_file" > "$log_file.tmp" && mv "$log_file.tmp" "$log_file"
    fi
}

# Show commit summary
show_commit_summary() {
    echo -e "${BLUE}📋 Commit Summary${NC}" >&2
    echo -e "${BLUE}=================${NC}" >&2
    echo -e "  Hash: ${GREEN}${COMMIT_HASH:0:8}${NC}" >&2
    echo -e "  Type: ${GREEN}$COMMIT_TYPE${NC}" >&2
    echo -e "  Impact: ${GREEN}$IMPACT_LEVEL${NC}" >&2
    echo -e "  Files: ${GREEN}$FILES_CHANGED${NC}" >&2
    echo -e "  Changes: ${GREEN}+$INSERTIONS${NC} ${RED}-$DELETIONS${NC}" >&2
    echo -e "  Author: ${GREEN}$COMMIT_AUTHOR${NC}" >&2
    echo -e "  Date: ${GREEN}$COMMIT_DATE${NC}" >&2
    
    if [[ "$IS_BREAKING" == "true" ]]; then
        echo -e "  ${RED}⚠️  BREAKING CHANGE${NC}" >&2
    fi
    
    echo "" >&2
    echo -e "${BLUE}Message:${NC}" >&2
    echo -e "${YELLOW}$COMMIT_MESSAGE${NC}" >&2
}

# Project-specific post-commit actions
run_project_actions() {
    case "$PROJECT_TYPE" in
        "javascript")
            # Check if version needs to be updated
            if [[ "$COMMIT_TYPE" == "feat" ]] || [[ "$COMMIT_TYPE" == "fix" ]]; then
                echo -e "${BLUE}💡 Consider running: npm version $IMPACT_LEVEL${NC}" >&2
            fi
            
            # Suggest running tests if test files were changed
            if git diff-tree --no-commit-id --name-only -r HEAD | grep -q "test\|spec"; then
                echo -e "${BLUE}💡 Test files changed. Consider running: npm test${NC}" >&2
            fi
            ;;
        "python")
            # Suggest version bump for significant changes
            if [[ "$COMMIT_TYPE" == "feat" ]] || [[ "$COMMIT_TYPE" == "fix" ]]; then
                echo -e "${BLUE}💡 Consider updating version in pyproject.toml or setup.py${NC}" >&2
            fi
            
            # Check if requirements changed
            if git diff-tree --no-commit-id --name-only -r HEAD | grep -q "requirements\|pyproject.toml"; then
                echo -e "${BLUE}💡 Dependencies changed. Consider updating environment${NC}" >&2
            fi
            ;;
        "go")
            # Suggest running tests for significant changes
            if [[ "$COMMIT_TYPE" == "feat" ]] || [[ "$COMMIT_TYPE" == "fix" ]]; then
                echo -e "${BLUE}💡 Consider running: go test ./...${NC}" >&2
            fi
            
            # Check if go.mod changed
            if git diff-tree --no-commit-id --name-only -r HEAD | grep -q "go.mod"; then
                echo -e "${BLUE}💡 go.mod changed. Consider running: go mod tidy${NC}" >&2
            fi
            ;;
        "rust")
            # Suggest version bump
            if [[ "$COMMIT_TYPE" == "feat" ]] || [[ "$COMMIT_TYPE" == "fix" ]]; then
                echo -e "${BLUE}💡 Consider updating version in Cargo.toml${NC}" >&2
            fi
            
            # Check if Cargo.toml changed
            if git diff-tree --no-commit-id --name-only -r HEAD | grep -q "Cargo.toml"; then
                echo -e "${BLUE}💡 Cargo.toml changed. Consider running: cargo check${NC}" >&2
            fi
            ;;
    esac
}

# Check for release conditions
check_release_conditions() {
    # Count commits since last tag
    local commits_since_tag=$(git rev-list --count $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD")..HEAD 2>/dev/null || echo "0")
    
    if [[ "$commits_since_tag" -gt 0 ]]; then
        echo -e "${BLUE}📦 Release Status:${NC}" >&2
        echo -e "  Commits since last tag: ${GREEN}$commits_since_tag${NC}" >&2
        
        # Suggest release for significant changes
        if [[ "$commits_since_tag" -ge 5 ]] || [[ "$IS_BREAKING" == "true" ]] || [[ "$COMMIT_TYPE" == "feat" ]]; then
            echo -e "${YELLOW}💡 Consider creating a release:${NC}" >&2
            echo -e "  ${BLUE}node scripts/auto-release.js $IMPACT_LEVEL${NC}" >&2
        fi
    fi
}

# Show next steps
show_next_steps() {
    echo -e "${BLUE}🚀 Next Steps:${NC}" >&2
    
    # Check if there are unpushed commits
    local unpushed=$(git log --oneline origin/$(git branch --show-current)..HEAD 2>/dev/null | wc -l || echo "0")
    if [[ "$unpushed" -gt 0 ]]; then
        echo -e "  ${YELLOW}📤 Push commits: git push${NC}" >&2
    fi
    
    # Project-specific suggestions
    run_project_actions
    
    # Release suggestions
    check_release_conditions
    
    # General suggestions
    echo -e "  ${BLUE}📋 View log: git log --oneline -5${NC}" >&2
    echo -e "  ${BLUE}📊 View stats: git show --stat${NC}" >&2
}

# Main execution
main() {
    echo -e "${GREEN}✅ Commit successful!${NC}" >&2
    echo "" >&2
    
    # Load project configuration
    load_project_config
    
    # Get commit information
    get_commit_info
    
    # Analyze commit
    analyze_commit "$COMMIT_MESSAGE"
    
    # Log commit
    log_commit
    
    # Show summary
    show_commit_summary
    
    echo "" >&2
    
    # Show next steps
    show_next_steps
    
    echo "" >&2
    echo -e "${GREEN}🎉 Happy coding!${NC}" >&2
}

# Run main function
main "$@" 